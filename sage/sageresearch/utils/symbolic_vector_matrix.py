# This file was *autogenerated* from the file SymbolicVectorMatrix.sage
import sage.all as sa


def get_vector_symbolic(name, length, get_symbolic):
    list_ = []
    for i in range(length):
        sym = get_symbolic(name + "_" + str(i))
        list_.append(sym)
    return sa.vector(list_)


def get_matrix_symbolic(name, num_rows, num_cols, get_symbolic):
    list_1 = []
    for i in range(num_rows):
        list_2 = []
        for j in range(num_cols):
            sym = get_symbolic(name + "_" + str(i) + "_" + str(j))
            list_2.append(sym)
        list_1.append(list_2)
    return sa.matrix(list_1)


def get_vector_variable(name, length, domain=None):
    if domain is None:
        return get_vector_symbolic(name, length, sa.SR.symbol)
    else:
        get_symbolic = lambda str_name: sa.SR.symbol(str_name, domain=domain)
        return get_vector_symbolic(name, length, get_symbolic)


def get_matrix_variable(name, num_rows, num_cols, domain=None):
    if domain is None:
        return get_matrix_symbolic(name, num_rows, num_cols, sa.SR.symbol)
    else:
        get_symbolic = lambda str_name: sa.SR.symbol(str_name, domain=domain)
        return get_matrix_symbolic(name, num_rows, num_cols, get_symbolic)


# TODO: examine documentation on sage symbolic functions
def get_vector_single_variable_function(name, length, variable):
    get_symbolic = lambda str_name: sa.function(str_name, nargs=1)(variable)
    return get_vector_symbolic(name, length, get_symbolic)


def get_matrix_single_variable_function(name, num_rows, num_cols, variable):
    get_symbolic = lambda str_name: sa.function(str_name, nargs=1)(variable)
    return get_matrix_symbolic(name, num_rows, num_cols, get_symbolic)


if __name__ == "__main__":
    pass
